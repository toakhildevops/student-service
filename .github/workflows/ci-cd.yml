name: student-portal CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'

jobs:
  # âœ… Detect changes in frontend/backend
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  # =========================
  # Frontend jobs
  # =========================
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: cd frontend && npm install
      - run: cd frontend && npm test -- --passWithNoTests

  build-frontend:
    runs-on: ubuntu-latest
    needs: test-frontend
    if: needs.test-frontend.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build frontend
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: cd frontend && npm install
      - run: cd frontend && NODE_OPTIONS=--openssl-legacy-provider npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  docker-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    if: needs.build-frontend.result == 'success'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build/

      - name: setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build frontend image locally
        uses: docker/build-push-action@v3
        with:
          context: frontend
          push: false
          load: true
          tags: frontend:sha-${{ github.sha }}

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: frontend:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:sha-${{ github.sha }}

  # =========================
  # Backend jobs
  # =========================
  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11
      - run: cd backend && mvn clean verify

  backend-build:
    runs-on: ubuntu-latest
    needs: test-backend
    if: needs.test-backend.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - run: cd backend && mvn -B package -DskipTests

      - name: Upload backend JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  docker-backend:
    runs-on: ubuntu-latest
    needs: backend-build
    if: needs.backend-build.result == 'success'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target

      - name: setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Build backend image locally
        uses: docker/build-push-action@v3
        with:
          context: backend
          file: backend/Dockerfile
          push: false
          load: true
          tags: backend:sha-${{ github.sha }}

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: backend:sha-${{ github.sha }}
          format: 'table'
          exit-code: '0'   # <-- continue pipeline even if vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image
        if: success()
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:sha-${{ github.sha }}

  # =========================
  # GitOps update
  # =========================
  gitops-update-frontend:
    runs-on: ubuntu-latest
    needs: [docker-frontend]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
          ref: main

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      # Update frontend image if frontend Docker succeeded
      - name: Update frontend image
        if: needs.docker-frontend.result == 'success'
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}/frontend:${IMAGE_TAG}"
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/frontend/deployment.yml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/frontend/deployment.yml

      - name: Commit and push changes
        run: |
          git add kubernetes/frontend/deployment.yml
          git commit -m "Update Kubernetes deployment with new image tag: sha-${{ github.sha }} [skip ci]" || echo "No changes to commit"
          git push origin main    
  
  gitops-update-backend:
    runs-on: ubuntu-latest
    needs: [docker-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
          ref: main

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"        
      # Update backend image if backend Docker succeeded
      - name: Update backend image
        if: needs.docker-backend.result == 'success'
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          REGISTRY: ghcr.io
        run: |
          # Define the new image with tag
          NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}/backend:${IMAGE_TAG}"
          # Update the deployment file directly
          sed -i "s|image: ${REGISTRY}/.*|image: ${NEW_IMAGE}|g" kubernetes/backend/deployment.yml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/backend/deployment.yml

      - name: Commit and push changes
        run: |
          git add kubernetes/backend/deployment.yml
          git commit -m "Update Kubernetes deployment with new image tag: sha-${{ github.sha }} [skip ci]" || echo "No changes to commit"
          git push origin main    
